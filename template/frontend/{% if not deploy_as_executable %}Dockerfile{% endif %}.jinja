{% raw %}# ------------ Stage 1: Build ------------
FROM node:{% endraw %}{{ node_version }}{% raw %}-alpine{% endraw %}{{ alpine_image_version }}{% raw %} AS builder

# docker build -t my-nuxt-app .
# docker run -p {% endraw %}{{ frontend_deployed_port_number }}{% raw %}:3000 my-nuxt-app

# Install pnpm globally
RUN npm install -g pnpm@{% endraw %}{{ pnpm_version }}{% raw %}

WORKDIR /app

# First just copy in the dependency information for better caching
COPY package.json pnpm-lock.yaml ./

# Install dependencies
RUN pnpm install --frozen-lockfile

COPY . .

# build the Nuxt app (generates .output folder in Nuxt 3)
RUN pnpm list && pnpm generate

# ------------ Stage 2: Production ------------
FROM nginx:{% endraw %}{{ nginx_image_version }}{% raw %}-alpine{% endraw %}{{ alpine_image_version }}{% raw %}-slim AS production

# bring in envsubst (part of gettext) (no particular reason for this version, just pinning for best practice)
RUN apk add --no-cache gettext=0.24.1-r0
COPY default.conf.template /etc/nginx/conf.d/default.conf.template
COPY --from=builder /app/.output/public /usr/share/nginx/html

# set sensible defaults (overridable at `docker run`)
ENV BACKEND_HOST=host.docker.internal \
    BACKEND_PORT={% endraw %}{{ backend_deployed_port_number }}{% raw %} \
    FRONTEND_PORT={% endraw %}{{ frontend_deployed_port_number }}{% raw %}

# Using port 80 caused problems running K8s on windows hosts, so using a higher port number
EXPOSE {% endraw %}{{ frontend_deployed_port_number }}{% raw %}

# Dynamically adjust the NGINX config based on the environmental variables, create a txt version that's easily viewable in client browsers, then start Nginx in foreground
CMD ["sh", "-c", "envsubst '$BACKEND_HOST $BACKEND_PORT $FRONTEND_PORT' < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && ln -sf /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.txt && exec nginx -g 'daemon off;'"]{% endraw %}
