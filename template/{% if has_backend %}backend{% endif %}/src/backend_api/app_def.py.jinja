{% raw %}import logging
import os
import threading
import time
from importlib.metadata import version
from pathlib import Path{% endraw %}{% if backend_uses_graphql %}{% raw %}
from typing import override{% endraw %}{% endif %}{% raw %}
{% endraw %}{% if backend_uses_graphql %}{% raw %}
import strawberry{% endraw %}{% endif %}{% raw %}
from fastapi import Query{% endraw %}{% if backend_uses_graphql %}{% raw %}
from fastapi import Request{% endraw %}{% endif %}{% raw %}
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi_offline import FastAPIOffline
from pydantic import BaseModel
from pydantic import Field{% endraw %}{% if backend_uses_graphql %}{% raw %}
from starlette.responses import HTMLResponse
from strawberry.fastapi import GraphQLRouter{% endraw %}{% endif %}{% raw %}

from .fast_api_exception_handlers import register_exception_handlers
from .jinja_constants import HUMAN_FRIENDLY_APP_NAME{% endraw %}{% if backend_uses_graphql %}{% raw %}
from .schema_def import schema{% endraw %}{% endif %}{% raw %}

logger = logging.getLogger(__name__)
BASE_DIR = Path(__file__).parent.parent
VERSION = version("backend-api")
STATIC_DIR = BASE_DIR / "static"
try:
    app = FastAPIOffline(
        title=HUMAN_FRIENDLY_APP_NAME,
        favicon_url="favicon.ico",
        version=VERSION,
        docs_url="/api-docs",
        static_url="/static/swagger",
    )
    register_exception_handlers(app)
except (  # pragma: no cover # This is just logging unexpected errors, and it's very challenging to explicitly unit test
    Exception
):
    logger.exception("Unhandled error instantiating FastAPI object")
    raise


class HealthcheckResponse(BaseModel):
    version: str = Field(description="Version of the application", default="1.0.0")


class ShutdownResponse(BaseModel):
    message: str = Field(
        default="Shutdown request received. Server will exit shortly.",
        description="Message indicating the shutdown request was received",
    )


@app.get("/api/healthcheck", summary="Check API health", tags=["system"])
def healthcheck(
    *,
    prepend_v: bool = Query(  # pyright: ignore[reportCallInDefaultInitializer] # This seems to be an accepted FastAPI pattern
        default=False, description="Include a 'v' before the version number"
    ),
) -> HealthcheckResponse:
    version_str = VERSION
    if prepend_v:
        version_str = f"v{VERSION}"
    return HealthcheckResponse(version=version_str)


@app.get("/api/shutdown", summary="Shut down the server", tags=["system"])
def shutdown() -> ShutdownResponse:
    logger.info("Server shutdown request received")

    def do_shutdown():
        time.sleep(0.1)  # Give time for the request to return a success response
        logger.info("Server is shutting down.")
        os._exit(
            0
        )  # sys.exit just causes an internal server error, it doesn't actually stop the server. So a hard exit is needed

    threading.Thread(target=do_shutdown, name="execute_shutdown").start()
    return ShutdownResponse(){% endraw %}{% if backend_uses_graphql %}{% raw %}


class CdnUrlNotFoundInHtmlError(Exception):
    def __init__(self, cdn_url: str):
        super().__init__(f"CDN URL '{cdn_url}' not found in GraphiQL HTML.")


def _get_graphiql_html_base() -> str:
    # separate for mocking
    return (Path(strawberry.__file__).with_name("static") / "graphiql.html").read_text()


def generate_offline_graphiql_html() -> str:
    offline_graphiql_html = _get_graphiql_html_base()
    cdn_urls = [
        "https://unpkg.com/react@18.2.0/umd/react.production.min.js",
        "https://unpkg.com/react-dom@18.2.0/umd/react-dom.production.min.js",
        "https://unpkg.com/js-cookie@3.0.5/dist/js.cookie.min.js",
        "https://unpkg.com/graphiql@3.0.9/graphiql.min.css",
        "https://unpkg.com/@graphiql/plugin-explorer@1.0.2/dist/style.css",
        "https://unpkg.com/graphiql@3.0.9/graphiql.min.js",
        "https://unpkg.com/@graphiql/plugin-explorer@1.0.2/dist/index.umd.js",
    ]
    for cdn_url in cdn_urls:
        if cdn_url not in offline_graphiql_html:
            raise CdnUrlNotFoundInHtmlError(cdn_url)
        filename = cdn_url.split("/")[-1]
        local_path = f"/static/graphiql/{filename}"
        offline_graphiql_html = offline_graphiql_html.replace(cdn_url, local_path)
    return "\n".join(
        # checksums vary slightly after running pre-commit hooks on them locally, so remove the integrity check
        [line for line in offline_graphiql_html.splitlines() if not line.startswith("      integrity=")]
    ){% endraw %}{% endif %}{% raw %}


try:
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # Super permissive CORS setting since this is for intranet
        allow_credentials=True,
        allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        allow_headers=["*"],
    ){% endraw %}{% if backend_uses_graphql %}{% raw %}
    offline_graphiql_html = generate_offline_graphiql_html()

    class OfflineGraphQLRouter(GraphQLRouter):
        @override
        async def render_graphql_ide(self, request: Request) -> HTMLResponse:
            return HTMLResponse(offline_graphiql_html)

    graphql_app = OfflineGraphQLRouter(schema)
    app.include_router(graphql_app, prefix="/api/graphql"){% endraw %}{% endif %}{% raw %}
    app.mount(
        "/", StaticFiles(directory=STATIC_DIR, html=True), name="static"
    )  # this needs to go after any defined routes so that the routes take precedence
except (  # pragma: no cover # This is just logging unexpected errors, and it's very challenging to explicitly unit test
    Exception
):
    logger.exception("Unhandled error")
    raise{% endraw %}
