{% raw %}import logging
from importlib.metadata import version

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse{% endraw %}{% if backend_uses_graphql %}{% raw %}
from strawberry.fastapi import GraphQLRouter{% endraw %}{% endif %}{% raw %}{% endraw %}{% if backend_uses_graphql %}{% raw %}

from .schema_def import schema{% endraw %}{% endif %}{% raw %}

logging.getLogger().setLevel(logging.INFO)
logger = logging.getLogger(__name__)

try:{% endraw %}{% if backend_uses_graphql %}{% raw %}
    graphql_app = GraphQLRouter(schema){% endraw %}{% endif %}{% raw %}
    app = FastAPI()

    @app.get("/healthcheck")
    async def healthcheck() -> JSONResponse:
        return JSONResponse(content={"version": version("backend-api")})

    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # Super permissive CORS setting since this is for intranet
        allow_credentials=True,
        allow_methods=["GET", "POST", "OPTIONS"],
        allow_headers=["*"],
    ){% endraw %}{% if backend_uses_graphql %}{% raw %}
    app.include_router(graphql_app, prefix="/graphql"){% endraw %}{% endif %}{% raw %}
except Exception:
    logger.exception("Unhandled error")
    raise{% endraw %}
