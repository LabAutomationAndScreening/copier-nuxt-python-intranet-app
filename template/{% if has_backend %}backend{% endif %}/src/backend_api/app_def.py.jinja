{% raw %}import logging
from importlib.metadata import version
from pathlib import Path

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.staticfiles import StaticFiles{% endraw %}{% if backend_uses_graphql %}{% raw %}
from strawberry.fastapi import GraphQLRouter{% endraw %}{% endif %}{% raw %}{% endraw %}{% if backend_uses_graphql %}{% raw %}

from .schema_def import schema{% endraw %}{% endif %}{% raw %}

logger = logging.getLogger(__name__)
BASE_DIR = Path(__file__).parent.parent
STATIC_DIR = BASE_DIR / "static"
app = FastAPI()
app.mount("/", StaticFiles(directory=STATIC_DIR, html=True), name="static")


@app.get("/api/healthcheck")
async def healthcheck() -> JSONResponse:
    return JSONResponse(content={"version": version("backend-api")})


try:
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # Super permissive CORS setting since this is for intranet
        allow_credentials=True,
        allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        allow_headers=["*"],
    ){% endraw %}{% if backend_uses_graphql %}{% raw %}
    graphql_app = GraphQLRouter(schema)
    app.include_router(graphql_app, prefix="/graphql"){% endraw %}{% endif %}{% raw %}
except (  # pragma: no cover # This is just logging unexpected errors, and it's very challenging to explicitly unit test
    Exception
):
    logger.exception("Unhandled error")
    raise{% endraw %}
