{% raw %}import logging
import os
import threading
import time
from importlib.metadata import version
from pathlib import Path

from fastapi import FastAPI
from fastapi import Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.openapi.docs import get_swagger_ui_html
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from pydantic import Field
from starlette.responses import HTMLResponse{% endraw %}{% if backend_uses_graphql %}{% raw %}
from strawberry.fastapi import GraphQLRouter{% endraw %}{% endif %}{% raw %}{% endraw %}{% if backend_uses_graphql %}{% raw %}

from .schema_def import schema{% endraw %}{% endif %}{% raw %}

logger = logging.getLogger(__name__)
BASE_DIR = Path(__file__).parent.parent
STATIC_DIR = BASE_DIR / "static"
app = FastAPI()


class HealthcheckResponse(BaseModel):
    version: str = Field(description="Version of the application", default="1.0.0")


class ShutdownResponse(BaseModel):
    message: str = Field(
        default="Shutdown request received. Server will exit shortly.",
        description="Message indicating the shutdown request was received",
    )


@app.get("/api-docs", include_in_schema=False)
def custom_swagger_ui_html(_: Request) -> HTMLResponse:
    assert app.openapi_url is not None
    return get_swagger_ui_html(
        openapi_url=app.openapi_url,
        title=app.title + " - Swagger UI",
        swagger_favicon_url="favicon.ico",
    )


@app.get("/api/healthcheck", summary="Check API health", tags=["system"])
def healthcheck() -> HealthcheckResponse:
    return HealthcheckResponse(version=version("backend-api"))


@app.get("/api/shutdown", summary="Shut down the server", tags=["system"])
def shutdown() -> ShutdownResponse:
    logger.info("Server shutdown request received")

    def do_shutdown():
        time.sleep(0.1)  # Give time for the request to return a success response
        logger.info("Server is shutting down.")
        os._exit(
            0
        )  # sys.exit just causes an internal server error, it doesn't actually stop the server. So a hard exit is needed

    threading.Thread(target=do_shutdown, name="execute_shutdown").start()
    return ShutdownResponse()


try:
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # Super permissive CORS setting since this is for intranet
        allow_credentials=True,
        allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        allow_headers=["*"],
    ){% endraw %}{% if backend_uses_graphql %}{% raw %}
    graphql_app = GraphQLRouter(schema)
    app.include_router(graphql_app, prefix="/api/graphql"){% endraw %}{% endif %}{% raw %}
    app.mount(
        "/", StaticFiles(directory=STATIC_DIR, html=True), name="static"
    )  # this needs to go after any defined routes so that the routes take precedence
except (  # pragma: no cover # This is just logging unexpected errors, and it's very challenging to explicitly unit test
    Exception
):
    logger.exception("Unhandled error")
    raise{% endraw %}
