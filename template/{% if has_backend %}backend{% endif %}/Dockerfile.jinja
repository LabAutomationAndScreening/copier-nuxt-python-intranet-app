{% raw %}FROM python:{% endraw %}{{ python_version }}{% raw %}-slim-{% endraw %}{{ debian_release_name }}{% raw %}

# docker build -t my-graphql-backend .
# docker run -p {% endraw %}{{ backend_deployed_port_number }}{% raw %}:4000 my-graphql-backend

# tell uv to treat /usr/local as the project env
ENV UV_PROJECT_ENVIRONMENT=/usr/local

COPY --from=ghcr.io/astral-sh/uv:{% endraw %}{{ uv_version }}{% raw %}-python{% endraw %}{{ python_version.split('.')[:2]|join('.') }}{% raw %}-{% endraw %}{{ debian_release_name }}{% raw %}-slim /usr/local/bin/uv /usr/local/bin/uvx /bin/

RUN uv --version

WORKDIR /app

# First just copy in the dependency information for better caching
COPY pyproject.toml uv.lock .python-version ./

RUN uv sync --frozen --no-dev --no-cache-dir

COPY . .

RUN uv pip list --format=columns --verbose

EXPOSE 4000

# By default, run the entrypoint to serve the GraphQL app
CMD ["python", "src/entrypoint.py", "--host", "0.0.0.0", "--port", "4000"]{% endraw %}
