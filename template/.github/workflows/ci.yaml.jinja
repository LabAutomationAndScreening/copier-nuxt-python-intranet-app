{% raw %}name: CI

on:
  push:
    branches-ignore:
      - 'gh-readonly-queue/**' # don't run (again) when on these special branches created during merge groups; the `on: merge_group` already triggers it.
  merge_group:

env:
  PYTHONUNBUFFERED: True
  PRE_COMMIT_HOME: ${{ github.workspace }}/.precommit_cache

permissions:
    id-token: write
    contents: write # needed for mutex

jobs:
  lint:
    name: Pre-commit
    runs-on: {% endraw %}{{ gha_linux_runner }}{% raw %}
    steps:
      - name: Checkout code
        uses: actions/checkout@{% endraw %}{{ gha_checkout }}{% raw %}

      - name: Setup node
        uses: actions/setup-node@{% endraw %}{{ gha_setup_node }}{% raw %}
        with:
          node-version: {% endraw %}{{ node_version }}{% raw %}

      - name: Install latest versions of python packages
        uses: ./.github/actions/install_deps_uv
        with:
          python-version: {% endraw %}{{ python_version }}{% raw %}

      - name: Set up mutex # Github concurrency management is horrible, things get arbitrarily cancelled if queued up. So using mutex until github fixes itself. When multiple jobs are modifying cache at once, weird things can happen.  possible issue is https://github.com/actions/toolkit/issues/658
        if: ${{ runner.os != 'Windows' }} # we're just gonna have to YOLO on Windows, because this action doesn't support it yet https://github.com/ben-z/gh-action-mutex/issues/14
        uses: ben-z/gh-action-mutex@{% endraw %}{{ gha_mutex }}{% raw %}
        with:
          branch: mutex-venv-{% endraw %}{{ gha_linux_runner }}{% raw %}-py{% endraw %}{{ python_version }}{% raw %}
        timeout-minutes: 30 # this is the amount of time this action will wait to attempt to acquire the mutex lock before failing, e.g. if other jobs are queued up in front of it

      - name: Cache Pre-commit hooks
        uses: actions/cache@{% endraw %}{{ gha_cache }}{% raw %}
        env:
          cache-name: cache-pre-commit-hooks
        with:
          path: ${{ env.PRE_COMMIT_HOME }}
          key: {% endraw %}{{ gha_linux_runner }}{% raw %}-py{% endraw %}{{ python_version }}{% raw %}-build-${{ env.cache-name }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            {% endraw %}{{ gha_linux_runner }}{% raw %}-py{% endraw %}{{ python_version }}{% raw %}-build-${{ env.cache-name }}-

      - name: Run pre-commit
        run:  pre-commit run -a{% endraw %}{% if has_backend %}{% raw %}

  unit-test-backend:
    name: Unit Test Backend
    runs-on: {% endraw %}{{ gha_linux_runner }}{% raw %}
    needs: [ lint ]
    steps:
      - name: Checkout code
        uses: actions/checkout@{% endraw %}{{ gha_checkout }}{% raw %}

      # TODO: don't setup node and figure out how to only install the Python dependencies
      - name: Setup node
        uses: actions/setup-node@{% endraw %}{{ gha_setup_node }}{% raw %}
        with:
          node-version: {% endraw %}{{ node_version }}{% raw %}

      - name: Install latest versions of python packages
        uses: ./.github/actions/install_deps_uv
        with:
          python-version: {% endraw %}{{ python_version }}{% raw %}

      - name: Unit test
        run: uv --directory=backend run pytest tests/unit --cov-report=xml --durations=5

  build-backend:
    needs: [ lint, unit-test-backend ]
    uses: ./.github/workflows/build-docker-image.yaml
    with:
      tag: ${{ github.sha }}
      context: ./backend
      repository: 183631337349.dkr.ecr.us-east-1.amazonaws.com
      image_name: orchestrator-health-app-backend{% endraw %}{% endif %}{% raw %}

  build-frontend:
    needs: [ lint, unit-test-backend ]
    uses: ./.github/workflows/build-docker-image.yaml
    with:
      tag: ${{ github.sha }}
      context: ./frontend
      repository: 183631337349.dkr.ecr.us-east-1.amazonaws.com
      image_name: orchestrator-health-app-frontend

  package-images:
    name: Package Images
    runs-on: {% endraw %}{{ gha_linux_runner }}{% raw %}
    needs: [ build-frontend{% endraw %}{% if has_backend %}{% raw %}, build-backend{% endraw %}{% endif %}{% raw %} ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@{% endraw %}{{ gha_checkout }}{% raw %}
    - name: Prepare docker-compose file
      run: |
        mkdir -p deployment-package-folder
        cp deployment/docker-compose.yaml deployment-package-folder/docker-compose.yaml
        sed -i '/image:/s/:latest/:${{ github.sha }}/g' deployment-package-folder/docker-compose.yaml{% endraw %}{% if has_backend %}{% raw %}

    - name: Download Backend Artifact
      uses: actions/download-artifact@{% endraw %}{{ gha_download_artifact }}{% raw %}
      with:
        name: orchestrator-health-app-backend
        path: deployment-package-folder{% endraw %}{% endif %}{% raw %}

    - name: Download Frontend Artifact
      uses: actions/download-artifact@{% endraw %}{{ gha_download_artifact }}{% raw %}
      with:
        name: orchestrator-health-app-frontend
        path: deployment-package-folder

    - name: Upload deployment package artifact
      uses: actions/upload-artifact@{% endraw %}{{ gha_upload_artifact }}{% raw %}
      with:
        name: orchestrator-health-app-deployment-package
        path: deployment-package-folder/**/*

  required-check:
    runs-on: {% endraw %}{{ gha_linux_runner }}{% raw %}
    needs: [ lint, package-images, build-frontend{% endraw %}{% if has_backend %}{% raw %}, unit-test-backend, build-backend{% endraw %}{% endif %}{% raw %} ]
    if: always()
    steps:
      - name: fail if prior job failure
        if: needs.lint.result != 'success' || needs.package-images.result != 'success' || needs.build-frontend.result != 'success'{% endraw %}{% if has_backend %}{% raw %} || needs.unit-test-backend.result != 'success' || needs.build-backend.result != 'success'{% endraw %}{% endif %}{% raw %}
        run: |
          exit 1{% endraw %}
