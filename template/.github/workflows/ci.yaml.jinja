{% raw %}name: CI

on:
  push:
    branches-ignore:
      - 'gh-readonly-queue/**' # don't run (again) when on these special branches created during merge groups; the `on: merge_group` already triggers it.
  merge_group:

env:
  PYTHONUNBUFFERED: True
  PRE_COMMIT_HOME: ${{ github.workspace }}/.precommit_cache

permissions:
    id-token: write
    contents: write # needed for mutex

jobs:
  get-values:
    uses: ./.github/workflows/get-values.yaml

  lint:
    needs: [ get-values ]
    name: Pre-commit
    uses: ./.github/workflows/pre-commit.yaml
    with:
      python-version: {% endraw %}{{ python_version }}{% raw %}
      setup-node: true
      node-version: {% endraw %}{{ node_version }}{% raw %}

  unit-test-frontend:
    name: Unit Test Frontend
    runs-on: {% endraw %}{{ gha_linux_runner }}{% raw %}
    needs: [ lint ]
    steps:
      - name: Checkout code
        uses: actions/checkout@{% endraw %}{{ gha_checkout }}{% raw %}

      # TODO: figure out how to only install the Node dependencies (not Python)
      - name: Setup node
        uses: actions/setup-node@{% endraw %}{{ gha_setup_node }}{% raw %}
        with:
          node-version: {% endraw %}{{ node_version }}{% raw %}

      - name: Install latest versions of python packages
        uses: ./.github/actions/install_deps_uv
        with:
          python-version: {% endraw %}{{ python_version }}{% raw %}

      - name: Unit test
        run: pnpm run --dir=frontend test-unit{% endraw %}{% if has_backend %}{% raw %}

  unit-test-backend:
    name: Unit Test Backend
    runs-on: {% endraw %}{{ gha_linux_runner }}{% raw %}
    needs: [ lint ]
    steps:
      - name: Checkout code
        uses: actions/checkout@{% endraw %}{{ gha_checkout }}{% raw %}

      # TODO: don't setup node and figure out how to only install the Python dependencies
      - name: Setup node
        uses: actions/setup-node@{% endraw %}{{ gha_setup_node }}{% raw %}
        with:
          node-version: {% endraw %}{{ node_version }}{% raw %}

      - name: Install latest versions of python packages
        uses: ./.github/actions/install_deps_uv
        with:
          python-version: {% endraw %}{{ python_version }}{% raw %}

      - name: Unit test
        run: uv --directory=backend run pytest tests/unit --cov-report=xml --durations=5

  build-backend:
    needs: [ lint, unit-test-frontend, unit-test-backend ]
    uses: ./.github/workflows/build-docker-image.yaml
    with:
      context: ./backend
      save-as-artifact: true
      tag-for-production: ${{ github.ref == 'refs/heads/main' }}
      repository: {% endraw %}{{ backend_ecr_base_url }}{% raw %}
      image_name: {% endraw %}{{ backend_image_name }}{% raw %}
{% endraw %}{% if push_to_ecr %}{% raw %}      push-role-name: {% endraw %}{{ backend_ecr_push_role_name }}{% endif %}{% endif %}{% raw %}

  build-frontend:
    needs: [ lint, unit-test-frontend{% endraw %}{% if has_backend %}{% raw %}, unit-test-backend{% endraw %}{% endif %}{% raw %} ]
    uses: ./.github/workflows/build-docker-image.yaml
    with:
      context: ./frontend
      save-as-artifact: true
      tag-for-production: ${{ github.ref == 'refs/heads/main' }}
      repository: {% endraw %}{{ frontend_ecr_base_url }}{% raw %}
      image_name: {% endraw %}{{ frontend_image_name }}{% raw %}
{% endraw %}{% if push_to_ecr %}{% raw %}      push-role-name: {% endraw %}{{ frontend_ecr_push_role_name }}{% endif %}{% raw %}

  e2e-test:
    name: End-to-end Testing
    runs-on: {% endraw %}{{ gha_linux_runner }}{% raw %}
    needs: [ build-frontend{% endraw %}{% if has_backend %}{% raw %}, build-backend{% endraw %}{% endif %}{% raw %} ]
    steps:
      - name: Checkout code
        uses: actions/checkout@{% endraw %}{{ gha_checkout }}{% raw %}

      # TODO: figure out how to only install the Node dependencies (not Python)
      - name: Setup node
        uses: actions/setup-node@{% endraw %}{{ gha_setup_node }}{% raw %}
        with:
          node-version: {% endraw %}{{ node_version }}{% raw %}

      - name: Install latest versions of python packages
        uses: ./.github/actions/install_deps_uv
        with:
          python-version: {% endraw %}{{ python_version }}{% raw %}

      - name: E2E test
        run: pnpm run --dir=frontend test-e2e

  e2e-test-docker:
    name: End-to-end Testing with Docker Compose
    runs-on: {% endraw %}{{ gha_linux_runner }}{% raw %}
    needs: [ build-frontend{% endraw %}{% if has_backend %}{% raw %}, build-backend{% endraw %}{% endif %}{% raw %} ]
    steps:
      - name: Checkout code
        uses: actions/checkout@{% endraw %}{{ gha_checkout }}{% raw %}

      # TODO: figure out how to only install the Node dependencies (not Python)
      - name: Setup node
        uses: actions/setup-node@{% endraw %}{{ gha_setup_node }}{% raw %}
        with:
          node-version: {% endraw %}{{ node_version }}{% raw %}

      - name: Install latest versions of python packages
        uses: ./.github/actions/install_deps_uv
        with:
          python-version: {% endraw %}{{ python_version }}{% raw %}{% endraw %}{% if has_backend %}{% raw %}

      - name: Download Backend Artifact
        uses: actions/download-artifact@{% endraw %}{{ gha_download_artifact }}{% raw %}
        with:
          name: {% endraw %}{{ backend_image_name | replace('/', '-') }}{% raw %}
          path: deployment-package-folder{% endraw %}{% endif %}{% raw %}

      - name: Download Frontend Artifact
        uses: actions/download-artifact@{% endraw %}{{ gha_download_artifact }}{% raw %}
        with:
          name: {% endraw %}{{ frontend_image_name | replace('/', '-') }}{% raw %}
          path: deployment-package-folder

      - name: Load docker images
        run: |
          ls deployment-package-folder -a
          # load all images in the folder
          ls -1 deployment-package-folder/*.tar | xargs --no-run-if-empty -L 1 docker load -i

      - name: E2E test
        run: pnpm run --dir=frontend test-e2e:docker

{% endraw %}{% if create_docker_image_tar_artifact %}{% raw %}  package-images:
    name: Package Images
    runs-on: {% endraw %}{{ gha_linux_runner }}{% raw %}
    needs: [ build-frontend{% endraw %}{% if has_backend %}{% raw %}, build-backend{% endraw %}{% endif %}{% raw %} ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@{% endraw %}{{ gha_checkout }}{% raw %}
    - name: Prepare docker-compose file
      run: |
        mkdir -p deployment-package-folder
        cp deployment/docker-compose.yaml deployment-package-folder/docker-compose.yaml
        sed -i '/image:/s/:latest/:${{ github.sha }}/g' deployment-package-folder/docker-compose.yaml{% endraw %}{% if has_backend %}{% raw %}

    - name: Download Backend Artifact
      uses: actions/download-artifact@{% endraw %}{{ gha_download_artifact }}{% raw %}
      with:
        name: {% endraw %}{{ repo_name }}{% raw %}-backend
        path: deployment-package-folder{% endraw %}{% endif %}{% raw %}

    - name: Download Frontend Artifact
      uses: actions/download-artifact@{% endraw %}{{ gha_download_artifact }}{% raw %}
      with:
        name: {% endraw %}{{ repo_name }}{% raw %}-frontend
        path: deployment-package-folder

    - name: Upload deployment package artifact
      uses: actions/upload-artifact@{% endraw %}{{ gha_upload_artifact }}{% raw %}
      with:
        name: {% endraw %}{{ repo_name }}{% raw %}-deployment-package
        path: deployment-package-folder/**/*{% endraw %}{% endif %}{% raw %}

  required-check:
    runs-on: {% endraw %}{{ gha_linux_runner }}{% raw %}
    needs:
      - get-values
      - lint{% endraw %}{% if create_docker_image_tar_artifact %}{% raw %}
      - package-images{% endraw %}{% endif %}{% raw %}
      - build-frontend
      - unit-test-frontend
      - e2e-test
      - e2e-test-docker{% endraw %}{% if has_backend %}{% raw %}
      - unit-test-backend, build-backend{% endraw %}{% endif %}{% raw %}
    if: always()
    steps:
      - name: fail if prior job failure
        if: needs.lint.result != 'success'{% endraw %}{% if create_docker_image_tar_artifact %}{% raw %} || needs.package-images.result != 'success'{% endraw %}{% endif %}{% raw %} || needs.build-frontend.result != 'success' || needs.unit-test-frontend.result != 'success' || needs.e2e-test.result != 'success' || needs.e2e-test-docker.result != 'success'{% endraw %}{% if has_backend %}{% raw %} || needs.unit-test-backend.result != 'success' || needs.build-backend.result != 'success'{% endraw %}{% endif %}{% raw %}
        run: |
          exit 1
      - name: Mark updated Dependabot commit of devcontainer hash as succeeded
        if: needs.get-values.outputs.dependabot-commit-created == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api \
            -X POST -H "Accept: application/vnd.github.v3+json" \
            "/repos/${{ github.repository }}/statuses/${{ needs.get-values.outputs.new-dependabot-sha }}" \
            -f state=success -f context="required-check" -f description="Initial CI run passed" \
            -f target_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"{% endraw %}
