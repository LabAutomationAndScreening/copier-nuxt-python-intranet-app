{% raw %}[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)
[![Open in Dev Containers](https://img.shields.io/static/v1?label=Dev%20Containers&message=Open&color=blue)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://www.github.com/{% endraw %}{{ repo_org_name }}{% raw %}/{% endraw %}{{ repo_name }}{% raw %})
[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)
[![uv](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json)](https://github.com/astral-sh/uv)
[![Checked with pyright](https://microsoft.github.io/pyright/img/pyright_badge.svg)](https://microsoft.github.io/pyright/)
[![PNPM](https://img.shields.io/badge/pnpm-%234a4a4a.svg?style=flat&logo=pnpm&logoColor=f69220)](https://pnpm.io/)
[![Nuxtjs](https://img.shields.io/badge/Nuxt-002E3B?style=flat&logo=nuxtdotjs&logoColor=#00DC82)](https://nuxt.com/)
[![TypeScript](https://img.shields.io/badge/typescript-%23007ACC.svg?style=flat&logo=typescript&logoColor=white)](https://www.typescriptlang.org/)


# Development

{% endraw %}{% if not deploy_as_executable %}{% raw %}To spin up the docker stack (frontend accessible on port {% endraw %}{{ frontend_deployed_port_number }}{% raw %}{% endraw %}{% if has_backend %}{% raw %}, backend accessible on port {% endraw %}{{ backend_deployed_port_number }}{% endif %}{% raw %}), run:
```bash
docker compose up
```{% endraw %}{% else %}{% raw %}To build and spin up the full stack (accessible on port {% endraw %}{{ backend_deployed_port_number }}{% raw %}), run:
```bash
pnpm --dir=frontend generate && cp ./frontend/.output/public/** ./backend/src/static -r && uv --directory=backend run pyinstaller pyinstaller.spec --noconfirm && ./backend/dist/{% endraw %}{{ repo_name }}{% raw %}/{% endraw %}{{ repo_name }}{% raw %}
```{% endraw %}{% endif %}{% raw %}

## Frontend
Start the development server on `http://localhost:3000`:
```bash
pnpm --dir=frontend dev
```

Build the application for production:

```bash
pnpm --dir=frontend generate
```

Locally preview production build:
```bash
pnpm --dir=frontend preview
```{% endraw %}{% if has_backend %}{% raw %}

## Backend
Start the API server on port 4000{% endraw %}{% if deploy_as_executable %}{% raw %} (will not generate log files){% endraw %}{% endif %}{% raw %}:
```bash
uv --directory=backend run uvicorn src.entrypoint:app --reload --host '::' --port 4000
```{% endraw %}{% endif %}{% raw %}{% endraw %}{% if deploy_as_executable %}{% raw %}

Start the app using the entrypoint to be able to supply CLI options and log to file (running by defaault on port {% endraw %}{{ backend_deployed_port_number }}{% raw %}):
```bash
uv --directory=backend run python src/entrypoint.py
```{% endraw %}{% endif %}{% if backend_uses_graphql %}{% raw %}

To regenerate the GraphQL client code for the E2E test suite, run:
```bash
uv --directory=backend run ariadne-codegen
```{% endraw %}{% endif %}{% raw %}

## Updating from the template
This repository uses a copier template. To pull in the latest updates from the template, use the command:
`copier update --trust --conflict rej --defaults`{% endraw %}
