{% raw %}services:{% endraw %}{% if has_backend %}{% raw %}
  backend:
    image: 183631337349.dkr.ecr.us-east-1.amazonaws.com/{% endraw %}{{ repo_name }}{% raw %}-backend:latest
    container_name: {% endraw %}{{ repo_name }}{% raw %}-backend
    ports:
      - "{% endraw %}{{ backend_deployed_port_number }}{% raw %}:4000"
    pull_policy: never  # Prevents Docker from pulling the image
    restart: unless-stopped
    networks:
      - internal_net
{% endraw %}{% endif %}{% raw %}
  frontend:
    image: 183631337349.dkr.ecr.us-east-1.amazonaws.com/{% endraw %}{{ repo_name }}{% raw %}-frontend:latest
    container_name: {% endraw %}{{ repo_name }}{% raw %}-frontend
    ports:
      - "{% endraw %}{{ frontend_deployed_port_number }}{% raw %}:3000"{% endraw %}{% if has_backend %}{% raw %}
    depends_on:
      - backend{% endraw %}{% endif %}{% raw %}
    environment:
      GRAPHQL_API_URL: http://backend:4000/graphql
    pull_policy: never  # Prevents Docker from pulling the image
    restart: unless-stopped
    networks:
      - internal_net

networks:
  internal_net:
    internal: {% endraw %}{% if create_internal_docker_compose_network %}{% raw %}true # block all outgoing internet access, to mimic the production environment{% endraw %}{% else %}{% raw %}false{% endraw %}{% endif %}{% raw %}{% endraw %}
